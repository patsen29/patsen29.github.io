const DEBUG_DAT = `*N       E2019 Washington   AB Hit  2B  3B  HR  BB  SO RBI B ERR SB CS Gam Gam-P Gam-P Gam-P Gam-P
26    06 Turner, Trea      521 155  37   5  19  43E113  57 R  13 35  5 122 122-6
30    09 Eaton, Adam       566 158  25   7  15  65D106  49 L   6 15  3 151 139-9 007-7
29    05 Rendon, Anthony   545 174  44   3  34  80D 86 126 R  11  5  1 146 146-5 001-4
20    07 Soto, Juan        542 153  32   5  34 108G132 110 L   2 12  1 150 150-7
35    03 Kendrick, Howie   334 115  23   1  17  27D 49  62 R   2  2  1 121 048-3 023-4 015-5 007-D
32    04 Dozier, Brian     416  99  20   0  20  61E105  50 R   5  3  4 135 123-4
22    08 Robles, Victor    546 139  33   3  17  35A140  65 R   6 28  9 155 141-8 015-9
31    02 Gomes, Yan        314  70  16   0  12  38D 84  43 R   4  2  0  97 093-2 001-3
00    01
*Pitchers                  Inn Hit          HR  BB  SO ERA T   W  L  S Gam  St     AB Hit HR  BB  SO
29    01 Corbin, Patrick   202 169          24  70 238 325 L  14  7  0  33  33  D  65   6  0   3  27
30    01 Strasburg, Stephen209 161          24  56 251 332 R  18  6  0  33  33  C  72  12  1   3  25
35    01 Sanchez, Anibal   166 153          22  58 134 385 R  11  8  0  30  30  D  52   6  0   0  24
34    01 Scherzer, Max     172 144          18  33 243 292 R  11  7  0  27  27  C  55  10  0   0  27
26    01 Fedde, Erick       78  81          11  33  41 450 R   4  2  0  21  12  C
32    01 Doolittle, Sean    60  63          11  15  66 405 L   6  5 29  63   0  D
27    01 Suero, Wander      71  64           5  26  81 454 R   6  9  1  78   0  D
30    01 Grace, Matt        47  61          11  10  35 636 L   1  2  0  51   1  D
26    01 Rainey, Tanner     48  32           6  38  74 391 R   2  3  0  52   0  D
33    01 Guerra, Javy       54  55           9  12  42 486 R   3  1  1  40   0  D
42    01 Rodney, Fernando   33  29           3  16  35 405 R   0  3  2  38   0  D
26    01 Ross, Joe          64  74           7  33  57 548 R   4  4  0  27   9  D  19   2  0   1  10
27    01 Voth, Austin       44  33           5  13  44 330 R   2  1  0   9   8  D
*Bench                      AB Hit  2B  3B  HR  BB  SO RBI B ERR SB CS Gam Gam-P Gam-P Gam-P Gam-P
30    03 Adams, Matt       310  70  14   0  20  20E115  56 L   5  0  0 111 079-3
35    02 Suzuki, Kurt      280  74  11   0  17  20B 36  63 R   3  0  1  85 075-2
32    09 Parra, Gerardo    188  47  11   1   8  11C 41  42 L   1  6  2  89 023-9 014-3 012-8 004-7
34    03 Zimmerman, Ryan   171  44   9   0   6  17I 39  27 R   3  0  0  52 044-3 003-D
33    04 Cabrera, Asdrubal 124  40  10   1   6  19I 18  40 B   0  0  0  38 031-4 005-5 003-3
27    06 Difo, Wilmer      131  33   2   0   2  12I 29   8 B   2  0  1  43 033-6 006-5 002-4
*COL=red`;
const POS_LABELS = ["--", "P", "C", "1B", "2B", "3B", "SS", "LF", "CF", "RF", "DH"];
const LG_GENERIC = "generic  | 31182| 31239|  5551|   884|  2906| 11469| 19090|      |119293|   162|";
const LG_AVG = `*Yr Lg   |  Inn |  Hits|    2B|    3B|    HR|    BB|    SO|in Lg.|    AB| teamG|
2020AL   |  7779|  7266|  1421|   115|  1160|  3024|  7776|    15| 29631|    60|
2020NL   |  7689|  7173|  1402|   126|  1144|  3068|  7810|    15| 29399|    60|
2019AL   | 21691| 21310|  4318|   385|  3490|  7921| 21241|    15| 83557|   162|
2019NL   | 21733| 20729|  4213|   400|  3286|  7974| 21582|    15| 83094|   162|
2018AL   | 21661| 20755|  4271|   390|  2932|  7666| 20425|    15| 82710|   162|
2018NL   | 21828| 20263|  3993|   457|  2653|  8020| 20782|    15| 82722|   162|
2017AL   | 21631| 21099|  4194|   334|  3145|  7721| 19946|    15| 83034|   162|
2017NL   | 21626| 21116|  4203|   461|  2960|  8108| 20158|    15| 82533|   162|
2016AL   | 21611| 21293|  4154|   371|  2934|  7280| 19244|    15| 82926|   162|
2016NL   | 21695| 20983|  4100|   502|  2676|  7808| 19738|    15| 82635|   162|
2015AL   | 21694| 21015|  4166|   459|  2554|  6961| 18423|    15| 82836|   162|
2015NL   | 21713| 21091|  4076|   480|  2355|  7112| 19023|    15| 82652|   162|
2014AL   | 21799| 20962|  4132|   390|  2151|  7017| 18588|    15| 83123|   162|
2014NL   | 21815| 20633|  4005|   459|  2035|  7003| 18853|    15| 82491|   162|
2013AL   | 21806| 21312|  4183|   348|  2509|  7421| 18536|    15| 83380|   162|
2013NL   | 21847| 20781|  4039|   424|  2152|  7219| 18174|    15| 82690|   162|
2012AL   | 20285| 19708|  3808|   369|  2453|  6815| 16711|    14| 77437|   162|
2012NL   | 23070| 22355|  4453|   558|  2481|  7894| 19715|    16| 87814|   162|
2011AL   | 20283| 19919|  4005|   411|  2224|  6949| 15655|    14| 77586|   162|
2011NL   | 23244| 22348|  4394|   487|  2328|  8069| 18833|    16| 88119|   162|
2010AL   | 20217| 19946|  4016|   368|  2218|  7270| 15350|    14| 77467|   162|
2010NL   | 23088| 22608|  4470|   498|  2395|  8508| 18956|    16| 87886|   162|
2009AL   | 20173| 20718|  4131|   388|  2494|  7592| 15386|    14| 77965|   162|
2009NL   | 23099| 22806|  4606|   561|  2548|  9028| 18205|    16| 87884|   162|
2008AL   | 20222| 20657|  4285|   408|  2246|  7470| 14925|    14| 78119|   162|
2008NL   | 23135| 23315|  4729|   478|  2632|  8867| 17959|    16| 88595|   162|
2007AL   | 20178| 21047|  4299|   433|  2256|  7439| 14890|    14| 78294|   162|
2007NL   | 23247| 23930|  4898|   505|  2701|  8640| 17299|    16| 89489|   162|
2006AL   | 20121| 21327|  4301|   391|  2518|  7128| 14397|    14| 78497|   162|
2006NL   | 23137| 23746|  4834|   561|  2868|  8719| 17258|    16| 88844|   162|
2005AL   | 20180| 20711|  4109|   420|  2401|  6768| 13814|    14| 78215|   162|
2005NL   | 23052| 23280|  4754|   468|  2616|  8439| 16830|    16| 88120|   162|
2004AL   | 20248| 21151|  4232|   404|  2591|  7520| 14505|    14| 78731|   162|
2004NL   | 23146| 23371|  4687|   494|  2860|  8702| 17323|    16| 88622|   162|
2003AL   | 20225| 20905|  4170|   443|  2500|  7111| 13735|    14| 78311|   162|
2003NL   | 23110| 23152|  4657|   491|  2707|  8778| 17066|    16| 88426|   162|
2002AL   | 20164| 20592|  4218|   433|  2457|  7290| 14020|    14| 77788|   162|
2002NL   | 23105| 22680|  4482|   488|  2602|  8956| 17374|    16| 87794|   162|
2001AL   | 20213| 20842|  4200|   440|  2483|  7269| 14474|    14| 78134|   162|
2001NL   | 23074| 23037|  4613|   488|  2975|  8537| 17930|    16| 88100|   162|
2000AL   | 20141| 21622|  4269|   420|  2696|  8390| 14033|    14| 78547|   162|
2000NL   | 23103| 23624|  4632|   532|  2997|  9847| 17323|    16| 88743|   162|
1999AL   | 20077| 21539|  4121|   419|  2619|  8296| 13913|    14| 78126|   162|
1999NL   | 23135| 23788|  4619|   512|  2909|  9595| 17206|    16| 89011|   162|
1998AL   | 20195| 21210|  4248|   408|  2479|  7704| 14341|    14| 78416|   162|
1998NL   | 23240| 23279|  4493|   491|  2585|  8743| 17552|    16| 88700|   163|
1997AL   | 20198| 21281|  4097|   398|  2468|  7859| 14440|    14| 78235|   162|
1997NL   | 20256| 20190|  3907|   485|  2172|  7807| 15497|    14| 77203|   162|
1996AL   | 20272| 21922|  4205|   421|  2742|  8592| 14056|    14| 79090|   162|
1996NL   | 20289| 20398|  3782|   434|  2220|  7501| 15252|    14| 77711|   162|
1995AL   | 17976| 18791|  3591|   406|  2164|  7572| 12116|    14| 69522|   145|
1995NL   | 18056| 18184|  3367|   418|  1917|  6668| 13309|    14| 69049|   144|
1994AL   | 14230| 15048|  2939|   325|  1774|  5938|  9619|    14| 55198|   114|
1994NL   | 14357| 14695|  2784|   377|  1532|  5193| 10147|    14| 55068|   115|
1993AL   | 20222| 20661|  3861|   427|  2074|  8006| 12952|    14| 77506|   162|
1993NL   | 20285| 20427|  3588|   513|  1956|  7104| 13358|    14| 77489|   162|
1992AL   | 20329| 20006|  3596|   386|  1776|  7704| 12196|    14| 77147|   162|
1992NL   | 17501| 16538|  2967|   459|  1262|  5978| 11342|    12| 65748|   162|
1991AL   | 20382| 20195|  3680|   453|  1953|  7730| 12944|    14| 77603|   162|
1991NL   | 17388| 16363|  2819|   441|  1430|  6254| 11446|    12| 65365|   162|
1990AL   | 20182| 19900|  3559|   460|  1796|  7631| 12689|    14| 76800|   162|
1990NL   | 17381| 16917|  2967|   405|  1521|  6221| 11164|    12| 65968|   162|
1989AL   | 20181| 20078|  3404|   457|  1718|  7277| 12296|    14| 77004|   162|
1989NL   | 17534| 16215|  2903|   411|  1365|  6251| 11354|    12| 65817|   162|
1988AL   | 20187| 19967|  3558|   425|  1901|  7191| 12323|    14| 77005|   162|
1988NL   | 17481| 16277|  2828|   415|  1279|  5793| 11032|    12| 65563|   162|
1987AL   | 20196| 20620|  3667|   461|  2634|  7812| 13442|    14| 77819|   162|
1987NL   | 17379| 17275|  3126|   435|  1824|  6577| 11657|    12| 66276|   162|
1986AL   | 20203| 20237|  3520|   468|  2290|  7667| 13058|    14| 77376|   162|
1986NL   | 17471| 16643|  2991|   387|  1523|  6560| 11648|    12| 65730|   162|
1985AL   | 20184| 20182|  3562|   528|  2178|  7465| 11777|    14| 77257|   162|
1985NL   | 17475| 16596|  2861|   437|  1424|  6373| 10674|    12| 65818|   162|
1984AL   | 20280| 20539|  3443|   534|  1980|  7171| 11571|    14| 77910|   162|
1984NL   | 17425| 16842|  2770|   451|  1278|  6149| 10929|    12| 65919|   162|
1983AL   | 20281| 20662|  3710|   549|  1903|  7094| 10967|    14| 77821|   162|
1983NL   | 17461| 16781|  2753|   484|  1398|  6424| 10749|    12| 65717|   163|
1982AL   | 20335| 20566|  3493|   519|  2080|  7338| 10921|    14| 77886|   162|
1982NL   | 17543| 17085|  2823|   445|  1299|  5964| 10300|    12| 66263|   162|
1981AL   | 13460| 13016|  2119|   305|  1062|  4761|  6905|    14| 50813|   107|
1981NL   | 11635| 11141|  1881|   354|   719|  4107|  6332|    12| 43654|   108|
1980AL   | 20332| 20958|  3489|   553|  1844|  7221| 10363|    14| 77888|   162|
1980NL   | 17530| 17186|  2856|   523|  1243|  5969|  9849|    12| 66272|   162|
1979AL   | 20052| 20682|  3529|   548|  2006|  7413| 10115|    14| 76704|   161|
1979NL   | 17427| 17229|  2886|   518|  1427|  6188|  9920|    12| 66088|   162|
1978AL   | 20163| 19952|  3325|   538|  1680|  7287| 10153|    14| 76411|   162|
1978NL   | 17333| 16556|  2861|   482|  1276|  6279|  9905|    12| 65156|   162|
1977AL   | 20224| 20572|  3408|   644|  2013|  7270| 11234|    14| 77275|   162|
1977NL   | 17515| 17465|  3033|   526|  1631|  6487| 10488|    12| 66700|   162|
1976AL   | 17468| 16820|  2588|   467|  1122|  6128|  9143|    12| 65711|   161|
1976NL   | 17457| 16778|  2652|   499|  1113|  6263|  9602|    12| 65814|   162|
1975AL   | 17274| 16861|  2662|   429|  1465|  6672|  9487|    12| 65371|   161|
1975NL   | 17450| 17002|  2781|   458|  1233|  6730|  9793|    12| 66102|   162|
1974AL   | 17449| 17062|  2564|   400|  1369|  6135|  9524|    12| 66044|   162|
1974NL   | 17494| 16907|  2642|   447|  1280|  6828|  9971|    12| 66212|   162|
1973AL   | 17397| 17193|  2624|   404|  1552|  6647|  9851|    12| 66276|   162|
1973NL   | 17482| 16817|  2600|   386|  1550|  6453| 10507|    12| 66087|   162|
1972AL   | 16654| 14751|  2260|   316|  1175|  5742| 10174|    12| 61712|   155|
1972NL   | 16797| 15683|  2392|   430|  1359|  5985| 10544|    12| 63116|   155|
1971AL   | 17291| 15957|  2426|   351|  1484|  6477| 10414|    12| 64641|   161|
1971NL   | 17476| 16590|  2505|   457|  1379|  6059| 10542|    12| 65903|   162|
1970AL   | 17447| 16404|  2492|   373|  1746|  6808| 10957|    12| 65675|   162|
1970NL   | 17412| 17151|  2743|   554|  1683|  6919| 11417|    12| 66465|   162|
1969AL   | 17497| 16120|  2385|   378|  1649|  7032| 10845|    12| 65536|   162|
1969NL   | 17384| 16461|  2455|   471|  1470|  6397| 11628|    12| 65751|   162|
1968AL   | 14550| 12359|  1874|   338|  1104|  4881|  9641|    10| 53709|   163|
1968NL   | 14677| 13351|  1995|   359|   891|  4275|  9502|    10| 54913|   163|
1967AL   | 14598| 12766|  1949|   365|  1197|  4993|  9945|    10| 54179|   162|
1967NL   | 14580| 13698|  2133|   427|  1102|  4672|  9468|    10| 55026|   162|
1966AL   | 14489| 13005|  2021|   408|  1365|  4927|  9493|    10| 54082|   162|
1966NL   | 14548| 14202|  2099|   412|  1378|  4404|  9312|    10| 55385|   162|
1965AL   | 14535| 13158|  2077|   365|  1370|  5306|  9634|    10| 54362|   162|
1965NL   | 14640| 13794|  2122|   422|  1318|  4730|  9649|    10| 55377|   163|
1964AL   | 14610| 13637|  2109|   333|  1551|  5227|  9956|    10| 55180|   163|
1964NL   | 14520| 14032|  2161|   427|  1211|  4394|  9256|    10| 55284|   163|
1963AL   | 14550| 13609|  2114|   352|  1489|  5031|  9228|    10| 55011|   162|
1963NL   | 14550| 13434|  1984|   439|  1215|  4560|  9545|    10| 54803|   163|
1962AL   | 14512| 14068|  2238|   400|  1552|  5671|  8535|    10| 55239|   162|
1962NL   | 14485| 14453|  2075|   453|  1449|  5265|  9032|    10| 55449|   163|
1961AL   | 14424| 14037|  2226|   404|  1534|  5902|  8330|    10| 54904|   163|
1961NL   | 11025| 11029|  1749|   350|  1196|  3995|  6622|     8| 42128|   155|
1960AL   | 11081| 10689|  1720|   274|  1086|  4447|  5993|     8| 41838|   155|
1960NL   | 11118| 10745|  1722|   384|  1042|  3937|  6824|     8| 42176|   155|
1959AL   | 11051| 10621|  1690|   267|  1091|  4210|  6081|     8| 41964|   155|
1959NL   | 11045| 11015|  1788|   324|  1159|  3974|  6525|     8| 42330|   155|
1958AL   | 11021| 10595|  1623|   290|  1057|  4062|  6037|     8| 41684|   155|
1958NL   | 11024| 11026|  1769|   365|  1183|  4065|  6192|     8| 42143|   154|
1957AL   | 11123| 10703|  1663|   307|  1024|  4309|  5814|     8| 41987|   154|
1957NL   | 11215| 11162|  1733|   365|  1178|  3866|  6150|     8| 42919|   155|
1956AL   | 11030| 10937|  1680|   353|  1075|  5019|  5813|     8| 42007|   155|
1956NL   | 11061| 10716|  1659|   372|  1219|  3982|  5694|     8| 41849|   156|
1955AL   | 11024| 10802|  1574|   338|   961|  4808|  5405|     8| 41817|   155|
1955NL   | 10982| 10808|  1677|   362|  1263|  4240|  5419|     8| 41773|   154|
1954AL   | 11103| 10766|  1639|   386|   823|  4619|  5129|     8| 41909|   156|
1954NL   | 11019| 11142|  1816|   403|  1114|  4414|  5086|     8| 42027|   154|
1953AL   | 11058| 11117|  1816|   331|   879|  4469|  4911|     8| 42358|   155|
1953NL   | 10969| 11342|  1777|   414|  1197|  4220|  5307|     8| 42639|   156|
1952AL   | 11176| 10690|  1716|   339|   794|  4630|  5154|     8| 42317|   156|
1952NL   | 11025| 10582|  1672|   338|   907|  4147|  5240|     8| 41878|   155|
1951AL   | 11053| 11103|  1836|   349|   839|  4889|  4595|     8| 42361|   155|
1951NL   | 11150| 11088|  1746|   367|  1024|  4362|  4746|     8| 42704|   156|
1950AL   | 10959| 11474|  1829|   423|   973|  5418|  4558|     8| 42407|   155|
1950NL   | 11007| 11085|  1885|   370|  1100|  4537|  5007|     8| 42416|   155|
1949AL   | 10938| 10961|  1737|   391|   769|  5627|  4369|     8| 41669|   155|
1949NL   | 11094| 11207|  1865|   370|   935|  4405|  4587|     8| 42711|   156|
1948AL   | 10973| 11209|  1846|   450|   710|  5232|  4306|     8| 42155|   155|
1948NL   | 10953| 11022|  1840|   384|   845|  4406|  4729|     8| 42256|   155|
1947AL   | 11074| 10739|  1708|   412|   679|  4745|  4633|     8| 42002|   156|
1947NL   | 10965| 11264|  1860|   392|   886|  4476|  4529|     8| 42434|   155|
1946AL   | 11059| 10793|  1827|   401|   653|  4404|  5228|     8| 42239|   156|
1946NL   | 11084| 10762|  1752|   382|   562|  4399|  4474|     8| 42094|   156|
1945AL   | 10945| 10634|  1674|   392|   430|  4145|  4186|     8| 41624|   153|
1945NL   | 11035| 11343|  1823|   336|   577|  4150|  3864|     8| 42823|   155|
1944AL   | 11168| 11114|  1771|   413|   459|  3951|  4244|     8| 42748|   155|
1944NL   | 11152| 11191|  1882|   395|   575|  3984|  3939|     8| 42918|   156|
1943AL   | 11225| 10521|  1728|   369|   473|  4324|  4503|     8| 42213|   155|
1943NL   | 11173| 10945|  1739|   388|   432|  4027|  4062|     8| 42491|   156|
1942AL   | 10931| 10784|  1797|   400|   533|  4317|  4139|     8| 41955|   153|
1942NL   | 11015| 10386|  1680|   323|   538|  4068|  4195|     8| 41769|   154|
1941AL   | 11085| 11492|  2066|   508|   734|  4744|  4425|     8| 43125|   156|
1941NL   | 11109| 11042|  1892|   359|   597|  4147|  4411|     8| 42729|   156|
1940AL   | 10956| 11674|  2167|   513|   883|  4496|  4729|     8| 43017|   155|
1940NL   | 11092| 11329|  1934|   416|   688|  3769|  4327|     8| 42986|   155|
1939AL   | 10873| 11866|  2107|   498|   796|  4660|  4320|     8| 42594|   154|
1939NL   | 10946| 11503|  2032|   418|   649|  3818|  4198|     8| 42285|   154|
1938AL   | 10743| 11934|  2133|   485|   864|  4924|  4255|     8| 42500|   154|
1938NL   | 10911| 11356|  1913|   450|   611|  3705|  4087|     8| 42513|   153|
1937AL   | 10951| 12176|  2294|   539|   806|  4773|  4443|     8| 43303|   156|
1937NL   | 10952| 11590|  1922|   458|   624|  3664|  4552|     8| 42660|   155|
1936AL   | 10931| 12655|  2400|   548|   758|  4855|  4033|     8| 43747|   155|
1936NL   | 11108| 12194|  2071|   431|   606|  3560|  4200|     8| 43891|   155|
1935AL   | 10911| 12031|  2212|   525|   663|  4547|  3942|     8| 42999|   153|
1935NL   | 10964| 12029|  2053|   462|   662|  3283|  4074|     8| 43438|   155|
1934AL   | 10903| 11968|  2205|   449|   688|  4611|  4285|     8| 42932|   154|
1934NL   | 10803| 12000|  2108|   433|   656|  3239|  4144|     8| 42982|   152|
1933AL   | 10892| 11636|  2090|   545|   607|  4375|  3909|     8| 42674|   152|
1933NL   | 11002| 11330|  1854|   422|   460|  2974|  3528|     8| 42559|   155|
1932AL   | 11002| 12009|  2287|   570|   707|  4402|  4012|     8| 43430|   154|
1932NL   | 11120| 12097|  2293|   502|   651|  3138|  3846|     8| 43763|   155|
1931AL   | 11025| 12158|  2323|   538|   576|  4161|  4045|     8| 43670|   155|
1931NL   | 10960| 11881|  2188|   532|   493|  3504|  3863|     8| 42941|   155|
1930AL   | 10910| 12343|  2375|   656|   673|  3958|  4080|     8| 42882|   154|
1930NL   | 10947| 13261|  2386|   625|   892|  3687|  3850|     8| 43693|   155|
1929AL   | 10913| 11973|  2229|   599|   595|  4065|  3566|     8| 42181|   154|
1929NL   | 10935| 12670|  2253|   569|   754|  3945|  3472|     8| 43030|   154|
1928AL   | 10980| 11828|  2200|   620|   483|  3827|  3704|     8| 42117|   155|
1928NL   | 11022| 11879|  2021|   518|   610|  3835|  3390|     8| 42336|   154|
1927AL   | 11001| 12050|  2261|   610|   439|  4029|  3399|     8| 42117|   155|
1927NL   | 11006| 11941|  1888|   540|   483|  3412|  3496|     8| 42344|   155|
1926AL   | 10944| 11770|  2195|   568|   424|  4206|  3456|     8| 41762|   154|
1926NL   | 10964| 11746|  1948|   589|   439|  3470|  3359|     8| 42009|   155|
1925AL   | 10971| 12430|  2218|   557|   533|  4315|  3317|     8| 42595|   154|
1925NL   | 10854| 12488|  2120|   614|   636|  3453|  3372|     8| 42859|   153|
1924AL   | 10944| 12237|  2197|   551|   397|  4146|  3243|     8| 42280|   155|
1924NL   | 10991| 11974|  1881|   622|   499|  3206|  3381|     8| 42445|   154|
1923AL   | 11009| 11852|  2010|   553|   442|  4100|  3601|     8| 42068|   154|
1923NL   | 11073| 12342|  1912|   588|   538|  3495|  3406|     8| 43216|   155|
1922AL   | 11059| 12011|  2032|   585|   525|  3780|  3580|     8| 42281|   155|
1922NL   | 11032| 12567|  1911|   662|   530|  3438|  3355|     8| 43050|   155|
1921AL   | 11018| 12507|  2140|   694|   477|  3943|  3606|     8| 42829|   154|
1921NL   | 10980| 12245|  1839|   670|   460|  2882|  3356|     8| 42376|   154|
1920AL   | 11036| 11911|  2007|   620|   369|  3807|  3633|     8| 41986|   155|
1920NL   | 11221| 11367|  1604|   644|   261|  3017|  3636|     8| 42197|   155|
1919AL   | 10046|  9998|  1607|   531|   240|  3369|  3577|     8| 37387|   140|
1919NL   | 10064|  9603|  1315|   517|   207|  2612|  3294|     8| 37284|   140|
1918AL   |  9219|  8502|  1204|   410|    96|  3206|  2977|     8| 33535|   127|
1918NL   |  9170|  8562|  1119|   475|   139|  2522|  2898|     8| 33780|   127|
1917AL   | 11227| 10039|  1477|   533|   133|  3831|  4146|     8| 40670|   156|
1917NL   | 11270| 10312|  1432|   605|   202|  3057|  4495|     8| 41385|   157|
1916AL   | 11286| 10170|  1540|   552|   144|  4072|  4698|     8| 40837|   157|
1916NL   | 11219| 10141|  1455|   589|   239|  3016|  4827|     8| 41090|   156|
1915AL   | 11109|  9999|  1409|   617|   160|  4217|  4857|     8| 40304|   156|
1915FL   | 11045| 10315|  1568|   580|   250|  3637|  4529|     8| 40512|   155|
1915NL   | 11164| 10145|  1555|   572|   225|  3269|  4729|     8| 40888|   156|
1914AL   | 11259| 10084|  1435|   598|   148|  3929|  5137|     8| 40743|   158|
1914FL   | 11079| 10790|  1680|   598|   296|  3623|  5115|     8| 40998|   156|
1914NL   | 11163| 10234|  1510|   543|   267|  3593|  4701|     8| 40846|   157|
1913AL   | 10937| 10214|  1476|   621|   159|  3792|  4863|     8| 39911|   154|
1913NL   | 11126| 10811|  1594|   645|   310|  3530|  4596|     8| 41301|   155|
1912AL   | 10931| 10819|  1591|   671|   156|  3776|  5157|     8| 40887|   155|
1912NL   | 10944| 11172|  1762|   683|   287|  3886|  4629|     8| 41153|   154|
1911AL   | 10934| 11237|  1623|   641|   198|  3635|  5093|     8| 41154|   154|
1911NL   | 11104| 10657|  1642|   682|   316|  4282|  4792|     8| 41107|   156|
1910AL   | 11283|  9927|  1299|   568|   147|  3464|  5278|     8| 40933|   157|
1910NL   | 11092| 10401|  1516|   592|   214|  4023|  4420|     8| 40615|   156|
1909AL   | 11030|  9728|  1272|   500|   109|  3046|  4918|     8| 39975|   155|
1909NL   | 11174|  9913|  1387|   503|   150|  3617|  4437|     8| 40649|   156|
1908AL   | 11148|  9724|  1279|   499|   116|  2897|  4930|     8| 40602|   156|
1908NL   | 11166|  9518|  1244|   502|   151|  3222|  4180|     8| 40078|   156|
1907AL   | 11005| 10105|  1322|   455|   104|  2886|  4479|     8| 40967|   155|
1907NL   | 10819|  9552|  1148|   505|   140|  3426|  4217|     8| 39337|   154|
1906AL   | 10864| 10001|  1374|   515|   137|  2835|  4561|     8| 40412|   154|
1906NL   | 10842|  9700|  1258|   489|   124|  3423|  4537|     8| 39649|   154|
1905AL   | 10979|  9705|  1531|   479|   156|  3008|  5107|     8| 40623|   155|
1905NL   | 11002| 10514|  1327|   641|   182|  3264|  4462|     8| 41219|   155|
1904AL   | 11084| 10138|  1482|   610|   156|  2611|  5026|     8| 41479|   157|
1904NL   | 10914| 10220|  1369|   544|   175|  3131|  4277|     8| 41010|   156|
1903AL   |  9784|  9553|  1549|   618|   184|  2266|  4199|     8| 37434|   139|
1903NL   |  9859| 10217|  1485|   543|   151|  3179|  3767|     8| 38005|   140|
1902AL   |  9733| 10451|  1660|   569|   258|  2815|  2744|     8| 38005|   138|
1902NL   |  9994|  9899|  1172|   414|    96|  2627|  3912|     8| 38275|   141|
1901AL   |  9566| 10559|  1534|   688|   228|  2780|  2736|     8| 38138|   137|
1901NL   |  9977| 10398|  1397|   550|   227|  2685|  4241|     8| 38967|   141|
1900NL   |  9914| 10925|  1432|   607|   254|  3034|  2697|     8| 39132|   142|
1899NL   | 15888| 17741|  2201|  1011|   352|  4979|  3867|    12| 62846|   154|
1898NL   | 15955| 16955|  2088|   900|   299|  5092|  4247|    12| 62661|   154|
1897NL   | 14004| 16523|  2322|   964|   368|  4729|  3734|    12| 56663|   135|
1896NL   | 13762| 16141|  2166|  1006|   404|  4854|  3523|    12| 55577|   132|
1895NL   | 13807| 16827|  2414|   997|   488|  5120|  3623|    12| 56788|   133|
1894NL   | 13831| 17809|  2753|  1300|   629|  5870|  3333|    12| 57577|   133|
1893NL   | 13864| 15913|  2197|  1047|   460|  6143|  3342|    12| 56898|   131|
1892NL   | 16107| 15643|  2007|  1010|   417|  6178|  5978|    12| 63876|   153|
1891AA   |  9693|  9865|  1243|   659|   291|  4231|  4015|     9| 38662|   124|
1891NL   |  9761|  9844|  1388|   610|   294|  3804|  3641|     8| 38998|   138|
1890AA   |  9353|  9341|  1258|   560|   187|  3746|  4233|     9| 37003|   120|
1890NL   |  9492|  9515|  1376|   586|   257|  3771|  3707|     8| 37587|   135|
1890PL   |  9323| 10589|  1576|   749|   320|  4204|  3006|     8| 38653|   133|
1889AA   |  9714| 10184|  1493|   618|   296|  3704|  4177|     8| 38940|   140|
1889NL   |  9306|  9924|  1522|   465|   371|  3613|  3508|     8| 37538|   133|
1888AA   |  9706|  9057|  1251|   545|   188|  2634|  4234|     8| 37983|   137|
1888NL   |  9556|  8944|  1200|   509|   333|  2092|  4000|     8| 37456|   136|
1887AA   |  9496| 10610|  1638|   687|   223|  3320|  3075|     8| 38923|   137|
1887NL   |  8874|  9615|  1450|   711|   383|  2732|  2840|     8| 35812|   127|
1886AA   |  9759|  9449|  1339|   649|   164|  3182|  4730|     8| 38930|   140|
1886NL   |  8523|  8526|  1340|   506|   249|  2391|  4321|     8| 33997|   123|
1885AA   |  7917|  7789|  1026|   553|   149|  1685|  3369|     8| 31602|   112|
1885NL   |  7803|  7519|  1167|   412|   174|  1844|  3335|     8| 31123|   112|
1884AA   | 11502| 11065|  1574|   833|   243|  1992|  5672|    13| 46186|   102|
1884NL   |  8046|  8070|  1216|   425|   321|  1821|  4335|     8| 32687|   114|
1884UA   |  7397|  7457|  1230|   279|   125|  1134|  4830|    12| 30439|    71|
1883AA   |  6919|  7217|   960|   478|   114|  1208|  2417|     8| 28655|    98|
1883NL   |  6956|  7611|  1527|   468|   124|  1121|  2877|     8| 29012|    99|
1882AA   |  4107|  4108|   545|   219|    52|   632|  1185|     6| 16853|    78|
1882NL   |  6043|  6224|  1071|   404|   126|   957|  2156|     8| 24769|    85|
1881NL   |  5988|  6331|  1068|   304|    76|  1036|  1784|     8| 24377|    84|
1880NL   |  6031|  5943|   980|   328|    62|   739|  1989|     8| 24301|    85|
1879NL   |  5797|  6171|   958|   317|    58|   508|  1843|     8| 24155|    81|
1878NL   |  3324|  3537|   481|   132|    23|   364|  1081|     6| 13644|    62|
1877NL   |  3241|  3705|   431|   204|    24|   346|   726|     6| 13667|    60|
1876NL   |  4739|  5338|   633|   181|    40|   336|   589|     8| 20121|    65|
1875NA   |  6190|  6812|   839|   273|    40|   249|   675|    13| 26833|    53|
1874NA   |  4170|  5224|   634|   194|    40|   238|   357|     8| 19104|    58|
1873NA   |  3585|  4926|   570|   211|    47|   335|   278|     9| 16959|    45|
1872NA   |  3286|  4467|   581|   145|    37|   263|   265|    11| 15665|    34|
1871NA   |  2250|  3101|   434|   239|    47|   393|   175|     9| 10822|    29|`;

Vue.filter('dec3', num => num && num.toFixed(3).replace("0.", "."));

let app = new Vue({
    el: "#app",
    data: function () {
        return {
            dat: DEBUG_DAT,
            lgAvg: {
                edit: false,
                list: LG_AVG.split("\n"),
            },
            tableType: "cards",
            cardsAll: [],
        };
    },
    template: `<div>
        <div class="no-print">
            <div><label for="datIn">Paste dat file in here:</label></div>
            <div><textarea id="datIn" cols="120" rows="10" v-model="dat" placeholder="Paste dat here"></textarea></div>
            <div>
                <button @click="makeCards()">Run</button>
                <button @click="clear">Clear</button>
            </div>
            <div>
                <label for="tableType">Table type:</label>
                <select v-model="tableType" id="tableType" >
                    <option value="raw">Raw ratings</option>
                    <option value="capped">Scaled ratings</option>
                    <option value="cards">As cards</option>
                </select>
            </div>
        </div>
        <card-list 
            v-bind:cards="cardsAll" 
            v-bind:tableType="tableType">
        </card-list>
    </div>`,
    methods: {
        // 0         1         2         3         4         5         6         7         8         9         0
        // 0 2 4 6 8 0 2 4 6 8 0 2 4 6 8 0 2 4 6 8 0 2 4 6 8 0 2 4 6 8 0 2 4 6 8 0 2 4 6 8 0 2 4 6 8 0 2 4 6 8 0
        // 00    00 Name              _AB Hit  2B  3B  HR  BB  SO RBI B ERR SB CS Gam Gam-P Gam-P Gam-P Gam-P
        // 00    00 Name              Inn Hit          HR  BB  SO ERA T   W  L Sv Gam  St  *  AB
        makeCards: function () {
            let datLines = this.dat.split('\n');
            let year, lg, teamName, isDef;
            // let meta = datLines.find(line => line.startsWith("*") && line.indexOf("=") > 0) || "";
            let lgAvg = this.leagueAverageOf(null, null);
            let cards = [];
            datLines.forEach(line => {
                if (line[0] === "*") {
                    let maybeYear = +line.substring(10, 14);
                    if (maybeYear > 0) {
                        year = maybeYear;
                        lg = line.substring(1, 2);
                        teamName = line.substring(15, 28).trim();
                        isDef = line.substring(61, 64).toUpperCase() === "DEF";
                        lgAvg = this.leagueAverageOf(year, lg)
                    }
                } else if (+line.substring(6, 8) > 1) {
                    cards.push(makeHitter(line, lgAvg, teamName, isDef))
                } else if (line.substring(6, 8) === "01" && +line.substring(27, 30) > 0) {
                    cards.push(makePitcher(line, lgAvg, teamName))
                }
            });
            cards.forEach(p => this.cardsAll.push(p)); // TODO: Dedupe in place, and preserve order
        },
        clear: function () {
            this.cardsAll = [];
        },
        leagueAverageOf: function (year, lg) {
            let line = this.lgAvg.list.find(e => e.startsWith(`${year}${lg}`)) || LG_GENERIC;
            let inn = +line.substring(10, 16);
            let h = +line.substring(17, 23);
            let db = +line.substring(24, 30);
            let tr = +line.substring(31, 37);
            let hr = +line.substring(38, 44);
            let bb = +line.substring(45, 51);
            let so = +line.substring(52, 58);
            let ab = +line.substring(66, 72) || (2.82 * inn + h);

            let lgBF = ab + bb;
            return {
                year: year,
                lg: lg,
                bb: bb / lgBF,
                h: h / lgBF,
                db: db / lgBF,
                tr: tr / lgBF,
                hr: hr / lgBF,
                so: so / lgBF,
                ipConst: (ab - h) / inn,
                wOBA: (.7 * bb + .9 * h + .35 * db + .7 * tr + 1.1 * hr) / lgBF,
                generic: line === LG_GENERIC
            };
        }
    },
    computed: {},
    filters: {
        split: function (num) {
            if (num < 0) return "—";
            let x = Math.round(num / 6);
            return Math.floor(num / 6) + "." + (num % 6);
        },
    }
});

function makeHitter(line, lgAvg, teamName, isDef) {
    let stats = {
        ab: +line.substring(27, 30),
        h: +line.substring(31, 34),
        db: +line.substring(35, 38),
        tr: +line.substring(39, 42),
        hr: +line.substring(43, 46),
        bb: +line.substring(47, 50),
        so: +line.substring(51, 54),
        rbi: +line.substring(55, 58),
        b: line[59],
        e: +line.substring(61, 64),
        sb: +line.substring(64, 67),
        cs: +line.substring(68, 70),
        g: +line.substring(71, 74)
    };
    let pa = stats.ab + stats.bb;
    // let dur = pa / 16200 * lgAvg.raw.tmG;
    let spd = getSpeed(stats);
    let wOBA = (.7 * stats.bb + .9 * stats.h + .35 * stats.db + .7 * stats.tr + 1.1 * stats.hr) / pa;
    // let power = Math.max(1, Math.min(6, Math.round(Math.max(6, 12*stats.hr) / pa / lgAvg.hr)));
    let rawChart = {
        hr: 2 * stats.hr / pa - lgAvg.hr, // TODO: Weak power rule
        tr: 2 * stats.tr / pa - lgAvg.tr,
        db: 2 * stats.db / pa - lgAvg.db,
        h: 2 * stats.h / pa - lgAvg.h,
        bb: 2 * stats.bb / pa - lgAvg.bb,
        so: 2 * stats.so / pa - lgAvg.so,
    };
    rawChart.si = (rawChart.h - rawChart.hr - rawChart.tr - rawChart.db); // TODO: Use slop
    let capped = capAndScale(rawChart, 216);
    let posList = [];
    let inn = 0;
    let defChance = 0;
    for (let i = 0; i < 4; i++) {
        let start = 75 + i * 6;
        let g = +line.substring(start, start + 3);
        let pos = +line.substring(start + 4, start + 5) || 10;
        if (pos < 10) inn += 9 * g;
        if (g > stats.g / 8) {
            posList.push(POS_LABELS[pos]);
        } else if (g > 1) {
            posList.push(POS_LABELS[pos].toLowerCase());
        }
        defChance += g * [0, 1, 1, 2.2, 5.7, 2.9, 4.8, 1.85, 2.45, 1.85, 0][pos];
    }
    inn = Math.min(inn, stats.g * 9);
    let e = isDef ? (1 - stats.e/1000) * defChance : stats.e;
    let err = getErrorRate(e, inn);
    let name = splitName(line.substring(9, 27));
    return {
        first: name[0],
        last: name[1],
        year: lgAvg.year,
        lg: lgAvg.lg,
        team: teamName,
        type: "B",
        pos: posList.slice(0, 4).join("/"),
        spd: Math.max(1, Math.min(9, Math.round(spd))),
        def: err,
        raw: {
            si: rawChart.si,
            db: rawChart.db,
            tr: rawChart.tr,
            hr: rawChart.hr,
            bb: rawChart.bb,
            so: rawChart.so,
            wOBA: wOBA
        },
        capped: capped,
        stats: stats,
        chart: convertChart(capped, false),
        flags: {
            generic: lgAvg.generic
        }
    };
}

function makePitcher(line, lgAvg, teamName) {
    let stats = {
        ip: +line.substring(27, 30),
        h: +line.substring(31, 34),
        hr: +line.substring(43, 46),
        bb: +line.substring(47, 50),
        so: +line.substring(51, 54),
        era: +line.substring(55, 58) / 100,
        t: line[59],
        w: +line.substring(61, 64),
        l: +line.substring(64, 67),
        sv: +line.substring(68, 70),
        g: +line.substring(71, 74),
        gs: +line.substring(75, 78),
    };
    let bfp = stats.ip * lgAvg.ipConst + stats.h + stats.bb;
    let wOBA = (.7 * stats.bb + stats.h + stats.hr) / bfp;
    let rawChart = {
        h: 2 * stats.h / bfp - lgAvg.h,
        hr: 2 * stats.hr / bfp - lgAvg.hr,
        bb: 2 * stats.bb / bfp - lgAvg.bb,
        so: 2 * stats.so / bfp - lgAvg.so
    };
    rawChart.db = (rawChart.h - rawChart.hr) / (lgAvg.h - lgAvg.hr) * lgAvg.db;
    rawChart.tr = (rawChart.h - rawChart.hr) / (lgAvg.h - lgAvg.hr) * lgAvg.tr;
    rawChart.si = rawChart.h - rawChart.db - rawChart.tr - rawChart.hr;
    let capped = capAndScale(rawChart, 216);

    //let dur = (.056 * stats.g + .024 * stats.ip) / 162 * this.lgAvg.raw.tmG;
    let pos = getPitcherRole(stats.g, stats.gs, stats.sv);
    let name = splitName(line.substring(9, 27));
    let end = Math.round(stats.ip / stats.g) + 1;
    let hit = line[80] || (end > 3 ? "C" : "D"); // TODO: Parse hitting stats later?
    return {
        first: name[0],
        last: name[1],
        year: lgAvg.year,
        lg: lgAvg.lg,
        team: teamName,
        type: "P",
        pos: pos,
        end: end,
        hit: hit,
        raw: {
            si: rawChart.si,
            db: rawChart.db,
            tr: rawChart.tr,
            hr: rawChart.hr,
            bb: rawChart.bb,
            so: rawChart.so,
            wOBA: wOBA
        },
        capped: capped,
        stats: stats,
        chart: convertChart(capped, true),
        flags: {
            generic: lgAvg.generic
        }
    };
}

function getErrorRate(err, inn) {
    // TODO: Should probably not be above average if adjusting 0 errors
    let errRate = Math.max(0.5, err) / inn * 2592 / 4.3;
    if (errRate >= 14) return 1;
    if (errRate >= 12.5) return 2;
    if (errRate >= 11) return 3;
    if (errRate >= 9) return 4;
    if (errRate >= 7.5) return 5;
    if (errRate >= 6) return 6;
    if (errRate >= 4.5) return 7;
    if (errRate >= 3) return 8;
    if (errRate >= 1.5) return 9;
    return 10;
}

function getPitcherRole(g, gs, sv) {
    let rpRole = (sv * 8 > g) ? "CL" : "RP";
    let startPct = gs / g;
    if (startPct > .8) return "SP";
    if (startPct > .5) return `SP/${rpRole}`;
    if (startPct > .2) return `${rpRole}/SP`;
    return rpRole
}

function getSpeed(stats) {
    let timesOnBase = Math.max(1, stats.h + stats.bb - stats.db - stats.tr - stats.hr);
    let spd1 = ((stats.sb + 3) / (stats.sb + stats.cs + 7) - .4) * 20;
    let spd2 = Math.sqrt((stats.sb + stats.cs) / timesOnBase) / 0.07;
    let spd3 = stats.tr / (stats.ab - stats.hr - stats.so) / .02 * 10;
    return (10 * spd1 + 10 * spd2 + 6 * Math.min(11, spd3)) / 26;
}

function capAndScale(raw, scale) {
    // TODO: Try to fix this? Something is off.
    let target = .7 * raw.bb + .9 * raw.si + 1.25 * raw.db + 1.6 * raw.tr + 2 * raw.hr;
    if (target <= 0) return {si: 0, db: 0, tr: 0, hr: 0, bb: 0, so: Math.round(scale * raw.so)};
    let capped = {
        si: Math.max(0, raw.si),
        db: Math.max(0, raw.db),
        tr: Math.max(0, raw.tr),
        hr: Math.max(0, raw.hr),
        bb: Math.max(0, raw.bb),
        so: Math.max(0, raw.so)
    };
    let cappedwOBA = .7 * capped.bb + .9 * capped.si + 1.25 * capped.db + 1.6 * capped.tr + 2 * capped.hr;
    let mult = target / cappedwOBA;
    let adj = {
        si: capped.si * mult,
        db: capped.db * mult,
        tr: capped.tr * mult,
        hr: capped.hr * mult,
        bb: capped.bb * mult,
        so: capped.so,
    };
    let scaled = {
        hr: Math.round(adj.hr * scale),
        tr: Math.round(adj.tr * scale),
        db: Math.round(adj.db * scale),
        bb: Math.round(adj.bb * scale),
        so: Math.round(adj.so * scale),
        si: 0
    };
    if (adj.si > 0) {
        scaled.si = Math.round((target * scale - 2*scaled.hr - 1.6*scaled.tr - 1.25*scaled.db - .7*scaled.bb) / .9)
    }
    scaled.wOBA = (.7*scaled.bb + .9*scaled.si + 1.25*scaled.db + 1.6*scaled.tr + 2*scaled.hr) / scale;
    return scaled;
}

function splitName(name) {
    let tokens = name.split(",");
    return [tokens[1].trim(), tokens[0].trim()];
}

function convertChart(chart, addErrors) {
    let counts = [chart.si, chart.db, chart.tr, chart.hr, chart.bb, chart.so];
    let renderedChart = [];
    let fbPool = ["F1", "F2", "F3", "F?"];
    let gbPool = ["G1", "G2"];
    let outPool = ["PO", "LO", "F?", "F3", "F2", "F1", "G?", "G3", "G2", "G1"];
    let allPool = [
        ["s1", "s2", "s?"],
        ["d2", "d3", "d?"],
        ["tr"],
        ["hr"],
        ["bb"],
        ["KO"]
    ];
    for (let i = 0; i < counts.length; i++) {
        let count = counts[i];
        let resultPool = allPool[i];

        let full = Math.floor(count / 6);
        let split = count % 6;
        for (let j = 0; j < full; j++) {
            renderedChart.push(resultPool[j % resultPool.length])
        }
        if (split > 0) {
            let first = resultPool[full % resultPool.length];
            let splitPool = (i === 0 || i === 4) ? gbPool : fbPool;
            let second = splitPool.shift();
            let splitOn = split + 1;
            renderedChart.push(`${first}${second}(${splitOn})`)
        }
    }
    // Add outs
    let outCount = (addErrors ? 27 : 36) - renderedChart.length;
    for (let i = 0; i < outCount; i++) {
        renderedChart.push(outPool[i % 10])
    }
    // Add errors
    let errorCount = 36 - renderedChart.length;
    for (let i = 1; i <= errorCount; i++) {
        renderedChart.push((errorCount < 9) ? "E?" : `E${i}`)
    }
    return renderedChart;
}
